// Lic:
// Quick Version
// The version data of this particular version (please note that the MKL version in this license block is merely the version of the source code. The version defined below is for the version of the compiled application)
// 
// 
// 
// (c) Jeroen P. Broks, 2022
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
// Please note that some references to data like pictures or audio, do not automatically
// fall under this licenses. Mostly this is noted in the respective files.
// 
// Version: 22.12.16
// EndLic
#pragma once
#include <string>

// This code is generated by QVersion! It's best NOT to manutally alter it!

namespace Slyvina {
	namespace Version {
		namespace QuickVersion {
			class QVersionClass {
			public:
				unsigned int giant{0}, major{0}, minor{0}; 
				std::string dt{"00000000000000"};
				std::string Status{"Stable"};
				inline std::string Version(bool full=true) {
					std::string ret{ std::to_string(giant)+"."+std::to_string(major)+"."+std::to_string(minor) };
					if (full) ret+="."+dt;
					if (Status!="Stable") ret += " (" + Status + ")";
					return ret;
				}
				inline QVersionClass(){} // Fuck you!
				inline QVersionClass(unsigned int _giant,unsigned int _major,unsigned int _minor,std::string _dt="00000000000000",std::string _status="Stable") {
					giant=_giant; major=_major; minor=_minor; dt=_dt; Status=_status;
				}
				inline bool WantVersion(unsigned int _giant,unsigned int _major=0,unsigned int _minor=0) {
					if (giant< _giant) return false; 
					if (giant==_giant && major< _major) return false;
					if (giant==_giant && major==_major && minor<_minor) return false;
					return true;
				}
			};

			static QVersionClass QVersion{0,0,1,"20221216153559","Alpha"};

		} // namespace QuickVersion
	} // namespace Version
} // namespace Slyvina